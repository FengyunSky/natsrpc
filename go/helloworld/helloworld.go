// This code was autogenerated from helloworld.proto, do not edit.
package helloworld

import (
	"context"
	"encoding/json"
	"nrpctest/nrpc"
	sync "sync"
	"time"
)

// GreeterServer is the interface that providers of the service
// Greeter should implement.
type GreeterServer interface {
	SayHello(ctx context.Context, req *nrpc.Request) (*nrpc.Response, error)
}

type GreeterClient struct {
	client   *nrpc.NRPCClient
	Encoding string
	Timeout  time.Duration
}

func NewGreeterClient(client *nrpc.NRPCClient) *GreeterClient {
	return &GreeterClient{
		client:   client,
		Encoding: "protobuf",
		Timeout:  10 * time.Second,
	}
}

type Message struct {
	Msg string `json:"msg"`
}

func (c *GreeterClient) SayHello(msg string) (*nrpc.Response, error) {
	data, err := json.Marshal(&Message{msg})
	if err != nil {
		return nil, err
	}

	var req = nrpc.Request{
		Name: nrpc.GetCurrentFuncName(),
		Data: data,
	}

	var wg sync.WaitGroup
	wg.Add(1)

	var response *nrpc.Response
	var retErr error
	if err := c.client.Call(&req, func(rsp *nrpc.Response, err error) {
		if err == nil {
			response = rsp
		}
		retErr = err
		wg.Done()
	}, &nrpc.RequestOpt{
		Qos:     nrpc.Qos1,
		Timeout: 3 * time.Second,
		MsgId:   req.Name,
	}); err != nil {
		return nil, err
	}
	wg.Wait()
	if retErr != nil {
		return nil, retErr
	}
	return response, nil
}

func (c *GreeterClient) SayHello1(msg string) (*nrpc.Response, error) {
	data, err := json.Marshal(&Message{msg})
	if err != nil {
		return nil, err
	}

	var req = nrpc.Request{
		Name: nrpc.GetCurrentFuncName(),
		Data: data,
	}
	var rsp = nrpc.Response{}
	if err := c.client.CallSync(&req, &rsp, &nrpc.RequestOpt{
		Qos:     nrpc.Qos1,
		Timeout: 3 * time.Second,
	}); err != nil {
		return nil, err
	}

	return &rsp, nil
}
